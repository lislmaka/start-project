volumes:
  db-data:
  static_volume:

services:
  # ----------------------------------------------------------------------------
  # nginx proxy server
  # ----------------------------------------------------------------------------
  nginx:
    # container_name: nginx
    build:
      context: .
      dockerfile: ./settings/docker/Dockerfile.nginx.prod
    ports:
      - 1337:80
    depends_on:
      - frontend-service
    volumes:
      - static_volume:/usr/share/nginx/html/static

  # ----------------------------------------------------------------------------
  # nuxt frontend
  # ----------------------------------------------------------------------------
  frontend-service:
    # container_name: nuxt-frontend
    build:
      context: .
      dockerfile: ./settings/docker/Dockerfile.frontend.prod
    # command: "npm run start"
    expose:
      - 3000
      - 24678:24678
    volumes:
      - ./frontend:/app
    env_file:
      - ./settings/env/.env.frontend.prod

  # ----------------------------------------------------------------------------
  # django backend
  # ----------------------------------------------------------------------------
  backend-service:
    # container_name: django-backend
    build:
      context: .
      dockerfile: ./settings/docker/Dockerfile.backend.prod
    expose:
      - 8000
    volumes:
      - ./backend:/app
      - static_volume:/app/static
    env_file:
      - ./settings/env/.env.backend.prod
    depends_on:
      - db_postgres
    command: >
      sh -c "./run_before.sh
      && pipenv run gunicorn -c gunicorn.py backend.wsgi"

  # ----------------------------------------------------------------------------
  # database
  # ----------------------------------------------------------------------------
  db_postgres:
    image: postgres
    # container_name: db_postgres
    # restart: always
    expose:
      - 5432
    volumes:
      - db-data:/var/lib/postgresql/data
    env_file:
      - ./settings/env/.env.backend.prod

  # ----------------------------------------------------------------------------
  # adminer
  # ----------------------------------------------------------------------------
  # adminer:
  #   image: adminer
  #   # restart: always
  #   # container_name: adminer
  #   depends_on:
  #     - db_postgres
  #   ports:
  #     - 8080:8080
  #   environment:
  #     ADMINER_DEFAULT_SERVER: db_postgres


    # sh -c "pipenv run gunicorn 'backend.wsgi' -b :8000 --timeout 120 --workers=3 --threads=3 --worker-connections=1000"
    # sh -c "pipenv run ./manage.py runserver 0.0.0.0:8000"
    # sh -c "pipenv run gunicorn 'backend.wsgi' --bind=0.0.0.0:8000 --timeout 600"
    # command: >
    #   sh -c "pipenv sync &&
    #   pipenv run gunicorn 'hh.wsgi' --bind=0.0.0.0:8000"


# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

